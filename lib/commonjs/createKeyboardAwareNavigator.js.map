{"version":3,"sources":["createKeyboardAwareNavigator.js"],"names":["Navigator","navigatorConfig","KeyboardAwareNavigator","React","Component","_previouslyFocusedTextInput","TextInput","State","currentlyFocusedInput","currentlyFocusedField","blurTextInput","props","onGestureBegin","focusTextInput","onGestureCanceled","onGestureFinish","transitionProps","prevTransitionProps","index","currentField","onTransitionStart","render","_handleGestureBegin","_handleGestureCanceled","_handleGestureEnd","_handleTransitionStart","router","navigationOptions"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;eAEe,CAACA,SAAD,EAAYC,eAAZ;AAAA;;AAAA,0BACb,MAAMC,sBAAN,SAAqCC,KAAK,CAACC,SAA3C,CAAqD;AAAA;AAAA;;AAAA,2DAGrB,IAHqB;;AAAA,mDAK7B,MAAM;AAC1B,aAAKC,2BAAL,GAAmCC,uBAAUC,KAAV,CAAgBC,qBAAhB,GAC/BF,uBAAUC,KAAV,CAAgBC,qBAAhB,EAD+B,GAE/BF,uBAAUC,KAAV,CAAgBE,qBAAhB,EAFJ;;AAGA,YAAI,KAAKJ,2BAAT,EAAsC;AACpCC,iCAAUC,KAAV,CAAgBG,aAAhB,CAA8B,KAAKL,2BAAnC;AACD;;AACD,aAAKM,KAAL,CAAWC,cAAX,IAA6B,KAAKD,KAAL,CAAWC,cAAX,EAA7B;AACD,OAbkD;;AAAA,sDAe1B,MAAM;AAC7B,YAAI,KAAKP,2BAAT,EAAsC;AACpCC,iCAAUC,KAAV,CAAgBM,cAAhB,CAA+B,KAAKR,2BAApC;AACD;;AACD,aAAKM,KAAL,CAAWG,iBAAX,IAAgC,KAAKH,KAAL,CAAWG,iBAAX,EAAhC;AACD,OApBkD;;AAAA,iDAsB/B,MAAM;AACxB,aAAKT,2BAAL,GAAmC,IAAnC;AACA,aAAKM,KAAL,CAAWI,eAAX,IAA8B,KAAKJ,KAAL,CAAWI,eAAX,EAA9B;AACD,OAzBkD;;AAAA,sDA2B1B,CAACC,eAAD,EAAkBC,mBAAlB,KAA0C;AACjE;AACA;AACA;AACA,YAAID,eAAe,CAACE,KAAhB,KAA0BD,mBAAmB,CAACC,KAAlD,EAAyD;AACvD,gBAAMC,YAAY,GAAGb,uBAAUC,KAAV,CAAgBC,qBAAhB,GACjBF,uBAAUC,KAAV,CAAgBC,qBAAhB,EADiB,GAEjBF,uBAAUC,KAAV,CAAgBE,qBAAhB,EAFJ;;AAGA,cAAIU,YAAJ,EAAkB;AAChBb,mCAAUC,KAAV,CAAgBG,aAAhB,CAA8BS,YAA9B;AACD;AACF;;AAED,cAAMC,iBAAiB,GACrB,KAAKT,KAAL,CAAWS,iBAAX,IAAgCnB,eAAe,CAACmB,iBADlD;AAEAA,QAAAA,iBAAiB,IACfA,iBAAiB,CAACJ,eAAD,EAAkBC,mBAAlB,CADnB;AAED,OA5CkD;AAAA;;AA8CnDI,IAAAA,MAAM,GAAG;AACP,0BACE,oBAAC,SAAD,eACM,KAAKV,KADX;AAEE,QAAA,cAAc,EAAE,KAAKW,mBAFvB;AAGE,QAAA,iBAAiB,EAAE,KAAKC,sBAH1B;AAIE,QAAA,YAAY,EAAE,KAAKC,iBAJrB;AAKE,QAAA,iBAAiB,EAAE,KAAKC;AAL1B,SADF;AASD;;AAxDkD,GADxC,oCAEKzB,SAAS,CAAC0B,MAFf,gDAGgB1B,SAAS,CAAC2B,iBAH1B;AAAA,C","sourcesContent":["import * as React from 'react';\r\nimport { TextInput } from 'react-native';\r\n\r\nexport default (Navigator, navigatorConfig) =>\r\n  class KeyboardAwareNavigator extends React.Component {\r\n    static router = Navigator.router;\r\n    static navigationOptions = Navigator.navigationOptions;\r\n    _previouslyFocusedTextInput = null;\r\n\r\n    _handleGestureBegin = () => {\r\n      this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput\r\n        ? TextInput.State.currentlyFocusedInput()\r\n        : TextInput.State.currentlyFocusedField();\r\n      if (this._previouslyFocusedTextInput) {\r\n        TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\r\n      }\r\n      this.props.onGestureBegin && this.props.onGestureBegin();\r\n    };\r\n\r\n    _handleGestureCanceled = () => {\r\n      if (this._previouslyFocusedTextInput) {\r\n        TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\r\n      }\r\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\r\n    };\r\n\r\n    _handleGestureEnd = () => {\r\n      this._previouslyFocusedTextInput = null;\r\n      this.props.onGestureFinish && this.props.onGestureFinish();\r\n    };\r\n\r\n    _handleTransitionStart = (transitionProps, prevTransitionProps) => {\r\n      // TODO: We should not even have received the transition start event\r\n      // in the case where the index did not change, I believe. We\r\n      // should revisit this after 2.0 release.\r\n      if (transitionProps.index !== prevTransitionProps.index) {\r\n        const currentField = TextInput.State.currentlyFocusedInput\r\n          ? TextInput.State.currentlyFocusedInput()\r\n          : TextInput.State.currentlyFocusedField();\r\n        if (currentField) {\r\n          TextInput.State.blurTextInput(currentField);\r\n        }\r\n      }\r\n\r\n      const onTransitionStart =\r\n        this.props.onTransitionStart || navigatorConfig.onTransitionStart;\r\n      onTransitionStart &&\r\n        onTransitionStart(transitionProps, prevTransitionProps);\r\n    };\r\n\r\n    render() {\r\n      return (\r\n        <Navigator\r\n          {...this.props}\r\n          onGestureBegin={this._handleGestureBegin}\r\n          onGestureCanceled={this._handleGestureCanceled}\r\n          onGestureEnd={this._handleGestureEnd}\r\n          onTransitionStart={this._handleTransitionStart}\r\n        />\r\n      );\r\n    }\r\n  };\r\n"]}
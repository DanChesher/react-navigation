{"version":3,"sources":["invariant.ts"],"names":["validateFormat","process","env","NODE_ENV","format","undefined","Error","invariant","condition","args","error","argIndex","replace","name","framesToPop"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAWA,IAAIA,cAAyC,GAAG,YAAY,CAAE,CAA9D;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,EAAAA,cAAc,GAAG,UAAUI,MAAV,EAA2B;AAC1C,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;AACF,GAJD;AAKD;;AAED,SAASC,SAAT,CAAmBC,SAAnB,EAAuCJ,MAAvC,EAAwD,GAAGK,IAA3D,EAAwE;AACtET,EAAAA,cAAc,CAACI,MAAD,CAAd;;AAEA,MAAI,CAACI,SAAL,EAAgB;AACd,QAAIE,KAAJ;;AACA,QAAIN,MAAM,KAAKC,SAAf,EAA0B;AACxBK,MAAAA,KAAK,GAAG,IAAIJ,KAAJ,CACN,+HADM,CAAR;AAGD,KAJD,MAIO;AACL,UAAIK,QAAQ,GAAG,CAAf;AACAD,MAAAA,KAAK,GAAG,IAAIJ,KAAJ,CAAUF,MAAM,CAACQ,OAAP,CAAe,KAAf,EAAsB,MAAMH,IAAI,CAACE,QAAQ,EAAT,CAAhC,CAAV,CAAR;AACAD,MAAAA,KAAK,CAACG,IAAN,GAAa,qBAAb;AACD;;AAEDH,IAAAA,KAAK,CAACI,WAAN,GAAoB,CAApB,CAZc,CAYS;;AACvB,UAAMJ,KAAN;AACD;AACF;;eAEcH,S","sourcesContent":["/**\r\n * Use invariant() to assert state which your program assumes to be true.\r\n *\r\n * Provide sprintf-style format (only %s is supported) and arguments\r\n * to provide information about what broke and what you were\r\n * expecting.\r\n *\r\n * The invariant message will be stripped in production, but the invariant\r\n * will remain to ensure logic does not differ in production.\r\n */\r\n\r\nlet validateFormat: (format?: string) => void = function () {};\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  validateFormat = function (format?: string) {\r\n    if (format === undefined) {\r\n      throw new Error('invariant requires an error message argument');\r\n    }\r\n  };\r\n}\r\n\r\nfunction invariant(condition: boolean, format?: string, ...args: any[]) {\r\n  validateFormat(format);\r\n\r\n  if (!condition) {\r\n    let error: Error & { framesToPop?: number };\r\n    if (format === undefined) {\r\n      error = new Error(\r\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\r\n      );\r\n    } else {\r\n      let argIndex = 0;\r\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\r\n      error.name = 'Invariant Violation';\r\n    }\r\n\r\n    error.framesToPop = 1; // we don't care about invariant's own frame\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default invariant;\r\n"]}
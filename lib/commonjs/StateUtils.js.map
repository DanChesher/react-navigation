{"version":3,"sources":["StateUtils.js"],"names":["StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","nextIndex","nextState","reset","Array","isArray","undefined","compare","ii","every"],"mappings":"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","sourcesContent":["import invariant from './utils/invariant';\r\n\r\n/**\r\n * Utilities to perform atomic operation with navigate state and routes.\r\n *\r\n * ```javascript\r\n * const state1 = {key: 'screen 1'};\r\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\r\n * ```\r\n */\r\nconst StateUtils = {\r\n  /**\r\n   * Gets a route by key. If the route isn't found, returns `null`.\r\n   */\r\n  get(state, key) {\r\n    return state.routes.find((route) => route.key === key) || null;\r\n  },\r\n\r\n  /**\r\n   * Returns the first index at which a given route's key can be found in the\r\n   * routes of the navigation state, or -1 if it is not present.\r\n   */\r\n  indexOf(state, key) {\r\n    return state.routes.findIndex((route) => route.key === key);\r\n  },\r\n\r\n  /**\r\n   * Returns `true` at which a given route's key can be found in the\r\n   * routes of the navigation state.\r\n   */\r\n  has(state, key) {\r\n    return !!state.routes.some((route) => route.key === key);\r\n  },\r\n\r\n  /**\r\n   * Pushes a new route into the navigation state.\r\n   * Note that this moves the index to the position to where the last route in the\r\n   * stack is at.\r\n   */\r\n  push(state, route) {\r\n    invariant(\r\n      StateUtils.indexOf(state, route.key) === -1,\r\n      'should not push route with duplicated key %s',\r\n      route.key\r\n    );\r\n\r\n    const routes = state.routes.slice();\r\n    routes.push(route);\r\n\r\n    return {\r\n      ...state,\r\n      index: routes.length - 1,\r\n      routes,\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Pops out a route from the navigation state.\r\n   * Note that this moves the index to the position to where the last route in the\r\n   * stack is at.\r\n   */\r\n  pop(state) {\r\n    if (state.index <= 0) {\r\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\r\n      return state;\r\n    }\r\n    const routes = state.routes.slice(0, -1);\r\n    return {\r\n      ...state,\r\n      index: routes.length - 1,\r\n      routes,\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Sets the focused route of the navigation state by index.\r\n   */\r\n  jumpToIndex(state, index) {\r\n    if (index === state.index) {\r\n      return state;\r\n    }\r\n\r\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\r\n\r\n    return {\r\n      ...state,\r\n      index,\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Sets the focused route of the navigation state by key.\r\n   */\r\n  jumpTo(state, key) {\r\n    const index = StateUtils.indexOf(state, key);\r\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\r\n    return StateUtils.jumpToIndex(state, index);\r\n  },\r\n\r\n  /**\r\n   * Sets the focused route to the previous route.\r\n   */\r\n  back(state) {\r\n    const index = state.index - 1;\r\n    const route = state.routes[index];\r\n    return route ? StateUtils.jumpToIndex(state, index) : state;\r\n  },\r\n\r\n  /**\r\n   * Sets the focused route to the next route.\r\n   */\r\n  forward(state) {\r\n    const index = state.index + 1;\r\n    const route = state.routes[index];\r\n    return route ? StateUtils.jumpToIndex(state, index) : state;\r\n  },\r\n\r\n  /**\r\n   * Replace a route by a key.\r\n   * Note that this moves the index to the position to where the new route in the\r\n   * stack is at and updates the routes array accordingly.\r\n   */\r\n  replaceAndPrune(state, key, route) {\r\n    const index = StateUtils.indexOf(state, key);\r\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\r\n\r\n    return {\r\n      ...replaced,\r\n      routes: replaced.routes.slice(0, index + 1),\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Replace a route by a key.\r\n   * Note that this moves the index to the position to where the new route in the\r\n   * stack is at. Does not prune the routes.\r\n   * If preserveIndex is true then replacing the route does not cause the index\r\n   * to change to the index of that route.\r\n   */\r\n  replaceAt(state, key, route, preserveIndex = false) {\r\n    const index = StateUtils.indexOf(state, key);\r\n    const nextIndex = preserveIndex ? state.index : index;\r\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\r\n    nextState.index = nextIndex;\r\n    return nextState;\r\n  },\r\n\r\n  /**\r\n   * Replace a route by a index.\r\n   * Note that this moves the index to the position to where the new route in the\r\n   * stack is at.\r\n   */\r\n  replaceAtIndex(state, index, route) {\r\n    invariant(\r\n      !!state.routes[index],\r\n      'invalid index %s for replacing route %s',\r\n      index,\r\n      route.key\r\n    );\r\n\r\n    if (state.routes[index] === route && index === state.index) {\r\n      return state;\r\n    }\r\n\r\n    const routes = state.routes.slice();\r\n    routes[index] = route;\r\n\r\n    return {\r\n      ...state,\r\n      index,\r\n      routes,\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Resets all routes.\r\n   * Note that this moves the index to the position to where the last route in the\r\n   * stack is at if the param `index` isn't provided.\r\n   */\r\n  reset(state, routes, index) {\r\n    invariant(\r\n      routes.length && Array.isArray(routes),\r\n      'invalid routes to replace'\r\n    );\r\n\r\n    const nextIndex = index === undefined ? routes.length - 1 : index;\r\n\r\n    if (state.routes.length === routes.length && state.index === nextIndex) {\r\n      const compare = (route, ii) => routes[ii] === route;\r\n      if (state.routes.every(compare)) {\r\n        return state;\r\n      }\r\n    }\r\n\r\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\r\n\r\n    return {\r\n      ...state,\r\n      index: nextIndex,\r\n      routes,\r\n    };\r\n  },\r\n};\r\n\r\nexport default StateUtils;\r\n"]}
{"version":3,"sources":["NavigationActions.ts"],"names":["BACK","INIT","NAVIGATE","SET_PARAMS","back","payload","type","key","immediate","init","action","params","navigate","routeName","setParams","preserveFocus"],"mappings":";;;;;;AAkDA;AACO,MAAMA,IAAI,GAAG,iBAAb;;AACA,MAAMC,IAAI,GAAG,iBAAb;;AACA,MAAMC,QAAQ,GAAG,qBAAjB;;AACA,MAAMC,UAAU,GAAG,uBAAnB,C,CAEP;;;;AACO,MAAMC,IAAI,GAAG,CAClBC,OAAoC,GAAG,EADrB,MAEQ;AAC1BC,EAAAA,IAAI,EAAEN,IADoB;AAE1BO,EAAAA,GAAG,EAAEF,OAAO,CAACE,GAFa;AAG1BC,EAAAA,SAAS,EAAEH,OAAO,CAACG;AAHO,CAFR,CAAb;;;;AAQA,MAAMC,IAAI,GAAG,CAACJ,OAAoC,GAAG,EAAxC,KAA+C;AACjE,QAAMK,MAA4B,GAAG;AACnCJ,IAAAA,IAAI,EAAEL;AAD6B,GAArC;;AAGA,MAAII,OAAO,CAACM,MAAZ,EAAoB;AAClBD,IAAAA,MAAM,CAACC,MAAP,GAAgBN,OAAO,CAACM,MAAxB;AACD;;AACD,SAAOD,MAAP;AACD,CARM;;;;AAUA,MAAME,QAAQ,GACnBP,OADsB,IAEO;AAC7B,QAAMK,MAAgC,GAAG;AACvCJ,IAAAA,IAAI,EAAEJ,QADiC;AAEvCW,IAAAA,SAAS,EAAER,OAAO,CAACQ;AAFoB,GAAzC;;AAIA,MAAIR,OAAO,CAACM,MAAZ,EAAoB;AAClBD,IAAAA,MAAM,CAACC,MAAP,GAAgBN,OAAO,CAACM,MAAxB;AACD;;AACD,MAAIN,OAAO,CAACK,MAAZ,EAAoB;AAClBA,IAAAA,MAAM,CAACA,MAAP,GAAgBL,OAAO,CAACK,MAAxB;AACD;;AACD,MAAIL,OAAO,CAACE,GAAZ,EAAiB;AACfG,IAAAA,MAAM,CAACH,GAAP,GAAaF,OAAO,CAACE,GAArB;AACD;;AACD,SAAOG,MAAP;AACD,CAjBM;;;;AAmBA,MAAMI,SAAS,GACpBT,OADuB,KAEQ;AAC/BC,EAAAA,IAAI,EAAEH,UADyB;AAE/BI,EAAAA,GAAG,EAAEF,OAAO,CAACE,GAFkB;AAG/BI,EAAAA,MAAM,EAAEN,OAAO,CAACM,MAHe;AAI/BI,EAAAA,aAAa,EAAE;AAJgB,CAFR,CAAlB","sourcesContent":["export interface NavigationParams {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface NavigationNavigateActionPayload {\r\n  routeName: string;\r\n  params?: NavigationParams;\r\n\r\n  // The action to run inside the sub-router\r\n  action?: NavigationNavigateAction;\r\n\r\n  key?: string;\r\n}\r\n\r\nexport interface NavigationNavigateAction\r\n  extends NavigationNavigateActionPayload {\r\n  type: 'Navigation/NAVIGATE';\r\n}\r\n\r\nexport interface NavigationBackActionPayload {\r\n  key?: string | null;\r\n  immediate?: boolean;\r\n}\r\n\r\nexport interface NavigationBackAction extends NavigationBackActionPayload {\r\n  type: 'Navigation/BACK';\r\n}\r\n\r\nexport interface NavigationInitActionPayload {\r\n  params?: NavigationParams;\r\n}\r\n\r\nexport interface NavigationInitAction extends NavigationInitActionPayload {\r\n  type: 'Navigation/INIT';\r\n}\r\n\r\nexport interface NavigationSetParamsActionPayload {\r\n  // The key of the route where the params should be set\r\n  key: string;\r\n\r\n  // The new params to merge into the existing route params\r\n  params?: NavigationParams;\r\n}\r\n\r\nexport interface NavigationSetParamsAction\r\n  extends NavigationSetParamsActionPayload {\r\n  type: 'Navigation/SET_PARAMS';\r\n  preserveFocus: true;\r\n}\r\n\r\n// Action constants\r\nexport const BACK = 'Navigation/BACK';\r\nexport const INIT = 'Navigation/INIT';\r\nexport const NAVIGATE = 'Navigation/NAVIGATE';\r\nexport const SET_PARAMS = 'Navigation/SET_PARAMS';\r\n\r\n// Action creators\r\nexport const back = (\r\n  payload: NavigationBackActionPayload = {}\r\n): NavigationBackAction => ({\r\n  type: BACK,\r\n  key: payload.key,\r\n  immediate: payload.immediate,\r\n});\r\n\r\nexport const init = (payload: NavigationInitActionPayload = {}) => {\r\n  const action: NavigationInitAction = {\r\n    type: INIT,\r\n  };\r\n  if (payload.params) {\r\n    action.params = payload.params;\r\n  }\r\n  return action;\r\n};\r\n\r\nexport const navigate = (\r\n  payload: NavigationNavigateActionPayload\r\n): NavigationNavigateAction => {\r\n  const action: NavigationNavigateAction = {\r\n    type: NAVIGATE,\r\n    routeName: payload.routeName,\r\n  };\r\n  if (payload.params) {\r\n    action.params = payload.params;\r\n  }\r\n  if (payload.action) {\r\n    action.action = payload.action;\r\n  }\r\n  if (payload.key) {\r\n    action.key = payload.key;\r\n  }\r\n  return action;\r\n};\r\n\r\nexport const setParams = (\r\n  payload: NavigationSetParamsActionPayload\r\n): NavigationSetParamsAction => ({\r\n  type: SET_PARAMS,\r\n  key: payload.key,\r\n  params: payload.params,\r\n  preserveFocus: true,\r\n});\r\n"]}
{"version":3,"sources":["getEventManager.js"],"names":["getEventManager","target","listeners","removeListener","type","callback","callbacks","undefined","index","indexOf","splice","addListener","push","remove","emit","data","items","slice","forEach","cb"],"mappings":"AAAA;;AAEA;;;AAGA,eAAe,SAASA,eAAT,CAAyBC,MAAzB,EAAiC;AAC9C;;;AAGA,QAAMC,SAAS,GAAG,EAAlB;AAEA;;;;;AAIA,QAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACzC,UAAMC,SAAS,GAAGJ,SAAS,CAACE,IAAD,CAAT,GAAkBF,SAAS,CAACE,IAAD,CAAT,CAAgBH,MAAhB,CAAlB,GAA4CM,SAA9D;;AAEA,QAAI,CAACD,SAAL,EAAgB;AACd;AACD;;AAED,UAAME,KAAK,GAAGF,SAAS,CAACG,OAAV,CAAkBJ,QAAlB,CAAd;AAEAC,IAAAA,SAAS,CAACI,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACD,GAVD;AAYA;;;;;;AAIA,QAAMG,WAAW,GAAG,CAACP,IAAD,EAAOC,QAAP,KAAoB;AACtCH,IAAAA,SAAS,CAACE,IAAD,CAAT,GAAkBF,SAAS,CAACE,IAAD,CAAT,IAAmB,EAArC;AACAF,IAAAA,SAAS,CAACE,IAAD,CAAT,CAAgBH,MAAhB,IAA0BC,SAAS,CAACE,IAAD,CAAT,CAAgBH,MAAhB,KAA2B,EAArD;AACAC,IAAAA,SAAS,CAACE,IAAD,CAAT,CAAgBH,MAAhB,EAAwBW,IAAxB,CAA6BP,QAA7B;AAEA,WAAO;AACLQ,MAAAA,MAAM,EAAE,MAAMV,cAAc,CAACC,IAAD,EAAOC,QAAP;AADvB,KAAP;AAGD,GARD;;AAUA,SAAO;AACLM,IAAAA,WADK;;AAGL;;;;AAIAG,IAAAA,IAAI,EAAE,CAACV,IAAD,EAAOW,IAAP,KAAgB;AACpB,YAAMC,KAAK,GAAGd,SAAS,CAACE,IAAD,CAAT,IAAmB,EAAjC;AAEA;;;;;AAIA,YAAME,SAAS,GAAGU,KAAK,CAACf,MAAD,CAAL,IAAiBe,KAAK,CAACf,MAAD,CAAL,CAAcgB,KAAd,EAAnC;AAEAX,MAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEY,OAAX,CAAoBC,EAAD,IAAQA,EAAE,CAACJ,IAAD,CAA7B;AACD;AAjBI,GAAP;AAmBD","sourcesContent":["// @ts-check\r\n\r\n/**\r\n * @param {string} target\r\n */\r\nexport default function getEventManager(target) {\r\n  /**\r\n   * @type {Record<string, Record<string, ((e: any) => void)[]>>}\r\n   */\r\n  const listeners = {};\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {() => void} callback\r\n   */\r\n  const removeListener = (type, callback) => {\r\n    const callbacks = listeners[type] ? listeners[type][target] : undefined;\r\n\r\n    if (!callbacks) {\r\n      return;\r\n    }\r\n\r\n    const index = callbacks.indexOf(callback);\r\n\r\n    callbacks.splice(index, 1);\r\n  };\r\n\r\n  /**\r\n   * @param {string} type\r\n   * @param {() => void} callback\r\n   */\r\n  const addListener = (type, callback) => {\r\n    listeners[type] = listeners[type] || {};\r\n    listeners[type][target] = listeners[type][target] || [];\r\n    listeners[type][target].push(callback);\r\n\r\n    return {\r\n      remove: () => removeListener(type, callback),\r\n    };\r\n  };\r\n\r\n  return {\r\n    addListener,\r\n\r\n    /**\r\n     * @param {string} type\r\n     * @param {any} [data]\r\n     */\r\n    emit: (type, data) => {\r\n      const items = listeners[type] || {};\r\n\r\n      /**\r\n       * Copy the current list of callbacks in case they are mutated during execution\r\n       * @type {((data: any) => void)[] | undefined}\r\n       */\r\n      const callbacks = items[target] && items[target].slice();\r\n\r\n      callbacks?.forEach((cb) => cb(data));\r\n    },\r\n  };\r\n}\r\n"]}
{"version":3,"sources":["getNavigationActionCreators.ts"],"names":["NavigationActions","invariant","getNavigationActionCreators","route","goBack","key","actualizedKey","undefined","back","navigate","navigateTo","params","action","routeName","setParams"],"mappings":"AAAA,OAAO,KAAKA,iBAAZ,MAAmC,sBAAnC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AAMA;AACA,MAAMC,2BAA2B,GAAIC,KAAD,IAAgB;AAClD,SAAO;AACLC,IAAAA,MAAM,EAAGC,GAAD,IAAyB;AAC/B,UAAIC,aAAa,GAAGD,GAApB;;AACA,UAAIA,GAAG,KAAKE,SAAR,IAAqBJ,KAAK,CAACE,GAA/B,EAAoC;AAClCJ,QAAAA,SAAS,CAAC,OAAOE,KAAK,CAACE,GAAb,KAAqB,QAAtB,EAAgC,wBAAhC,CAAT;AACAC,QAAAA,aAAa,GAAGH,KAAK,CAACE,GAAtB;AACD;;AACD,aAAOL,iBAAiB,CAACQ,IAAlB,CAAuB;AAAEH,QAAAA,GAAG,EAAEC;AAAP,OAAvB,CAAP;AACD,KARI;AASLG,IAAAA,QAAQ,EAAE,CACRC,UADQ,EAERC,MAFQ,EAGRC,MAHQ,KAIL;AACH,UAAI,OAAOF,UAAP,KAAsB,QAA1B,EAAoC;AAClC,eAAOV,iBAAiB,CAACS,QAAlB,CAA2B;AAChCI,UAAAA,SAAS,EAAEH,UADqB;AAEhCC,UAAAA,MAFgC;AAGhCC,UAAAA;AAHgC,SAA3B,CAAP;AAKD;;AACDX,MAAAA,SAAS,CACP,OAAOS,UAAP,KAAsB,QADf,EAEP,uCAFO,CAAT;AAIAT,MAAAA,SAAS,CACPU,MAAM,IAAI,IADH,EAEP,sEAFO,CAAT;AAIAV,MAAAA,SAAS,CACPW,MAAM,IAAI,IADH,EAEP,4EAFO,CAAT;AAIA,aAAOZ,iBAAiB,CAACS,QAAlB,CAA2BC,UAA3B,CAAP;AACD,KAlCI;AAmCLI,IAAAA,SAAS,EAAGH,MAAD,IAA+B;AACxCV,MAAAA,SAAS,CACPE,KAAK,CAACE,GAAN,IAAa,OAAOF,KAAK,CAACE,GAAb,KAAqB,QAD3B,EAEP,8CAFO,CAAT;AAIA,aAAOL,iBAAiB,CAACc,SAAlB,CAA4B;AAAEH,QAAAA,MAAF;AAAUN,QAAAA,GAAG,EAAEF,KAAK,CAACE;AAArB,OAA5B,CAAP;AACD;AAzCI,GAAP;AA2CD,CA5CD;;AA8CA,eAAeH,2BAAf","sourcesContent":["import * as NavigationActions from '../NavigationActions';\r\nimport invariant from '../utils/invariant';\r\n\r\ninterface NavigationParams {\r\n  [key: string]: any;\r\n}\r\n\r\n// TODO: Type `route`\r\nconst getNavigationActionCreators = (route: any) => {\r\n  return {\r\n    goBack: (key?: string | null) => {\r\n      let actualizedKey = key;\r\n      if (key === undefined && route.key) {\r\n        invariant(typeof route.key === 'string', 'key should be a string');\r\n        actualizedKey = route.key;\r\n      }\r\n      return NavigationActions.back({ key: actualizedKey });\r\n    },\r\n    navigate: (\r\n      navigateTo: string | NavigationActions.NavigationNavigateActionPayload,\r\n      params?: NavigationParams,\r\n      action?: NavigationActions.NavigationNavigateAction\r\n    ) => {\r\n      if (typeof navigateTo === 'string') {\r\n        return NavigationActions.navigate({\r\n          routeName: navigateTo,\r\n          params,\r\n          action,\r\n        });\r\n      }\r\n      invariant(\r\n        typeof navigateTo === 'object',\r\n        'Must navigateTo an object or a string'\r\n      );\r\n      invariant(\r\n        params == null,\r\n        'Params must not be provided to .navigate() when specifying an object'\r\n      );\r\n      invariant(\r\n        action == null,\r\n        'Child action must not be provided to .navigate() when specifying an object'\r\n      );\r\n      return NavigationActions.navigate(navigateTo);\r\n    },\r\n    setParams: (params?: NavigationParams) => {\r\n      invariant(\r\n        route.key && typeof route.key === 'string',\r\n        'setParams cannot be called by root navigator'\r\n      );\r\n      return NavigationActions.setParams({ params, key: route.key });\r\n    },\r\n  };\r\n};\r\n\r\nexport default getNavigationActionCreators;\r\n"]}
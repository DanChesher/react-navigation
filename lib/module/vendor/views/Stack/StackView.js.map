{"version":3,"sources":["StackView.tsx"],"names":["React","View","Platform","StyleSheet","SafeAreaConsumer","StackActions","NavigationActions","SceneView","GestureHandlerRootView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","HeaderShownContext","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","Component","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","gestureEnabled","animationEnabled","options","undefined","OS","filter","r","includes","findIndex","props","navigation","getComponent","SceneComponent","screenProps","isTransitioning","dispatch","completeTransition","toChildKey","handleTransitionComplete","some","navigate","setState","pop","prune","closing","onTransitionStart","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","render","keyboardHandlingEnabled","mode","headerMode","_","rest","styles","container","insets","isParentHeaderShown","getPreviousRoute","getGesturesEnabled","handleOpenRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","handleGestureStart","handleGestureEnd","handleGestureCancel","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, Platform, StyleSheet } from 'react-native';\r\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\r\nimport {\r\n  StackActions,\r\n  NavigationState as StackNavigationState,\r\n  NavigationActions,\r\n  SceneView,\r\n} from 'react-navigation';\r\n\r\nimport { GestureHandlerRootView } from '../GestureHandler';\r\nimport CardStack from './CardStack';\r\nimport KeyboardManager from '../KeyboardManager';\r\nimport HeaderContainer, {\r\n  Props as HeaderContainerProps,\r\n} from '../Header/HeaderContainer';\r\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\r\nimport type {\r\n  Route,\r\n  StackNavigationHelpers,\r\n  StackNavigationConfig,\r\n  StackDescriptorMap,\r\n} from '../../types';\r\nimport HeaderShownContext from '../../utils/HeaderShownContext';\r\n\r\ntype Props = StackNavigationConfig & {\r\n  state: StackNavigationState;\r\n  navigation: StackNavigationHelpers;\r\n  descriptors: StackDescriptorMap;\r\n  screenProps: unknown;\r\n};\r\n\r\ntype State = {\r\n  // Local copy of the routes which are actually rendered\r\n  routes: Route<string>[];\r\n  // Previous routes, to compare whether routes have changed or not\r\n  previousRoutes: Route<string>[];\r\n  // Previous descriptors, to compare whether descriptors have changed or not\r\n  previousDescriptors: StackDescriptorMap;\r\n  // List of routes being opened, we need to animate pushing of these new routes\r\n  openingRouteKeys: string[];\r\n  // List of routes being closed, we need to animate popping of these routes\r\n  closingRouteKeys: string[];\r\n  // List of routes being replaced, we need to keep a copy until the new route animates in\r\n  replacingRouteKeys: string[];\r\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\r\n  // Otherwise we won't be able to access the options for routes that were removed\r\n  descriptors: StackDescriptorMap;\r\n};\r\n\r\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\r\n\r\n/**\r\n * Compare two arrays with primitive values as the content.\r\n * We need to make sure that both values and order match.\r\n */\r\nconst isArrayEqual = (a: any[], b: any[]) =>\r\n  a.length === b.length && a.every((it, index) => it === b[index]);\r\n\r\nexport default class StackView extends React.Component<Props, State> {\r\n  static getDerivedStateFromProps(\r\n    props: Readonly<Props>,\r\n    state: Readonly<State>\r\n  ) {\r\n    // If there was no change in routes, we don't need to compute anything\r\n    if (\r\n      (props.state.routes === state.previousRoutes ||\r\n        isArrayEqual(\r\n          props.state.routes.map((r) => r.key),\r\n          state.previousRoutes.map((r) => r.key)\r\n        )) &&\r\n      state.routes.length\r\n    ) {\r\n      let routes = state.routes;\r\n      let previousRoutes = state.previousRoutes;\r\n      let descriptors = props.descriptors;\r\n      let previousDescriptors = state.previousDescriptors;\r\n\r\n      if (props.descriptors !== state.previousDescriptors) {\r\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\r\n          acc[route.key] =\r\n            props.descriptors[route.key] || state.descriptors[route.key];\r\n\r\n          return acc;\r\n        }, {});\r\n\r\n        previousDescriptors = props.descriptors;\r\n      }\r\n\r\n      if (props.state.routes !== state.previousRoutes) {\r\n        // if any route objects have changed, we should update them\r\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\r\n          (acc, route) => {\r\n            acc[route.key] = route;\r\n            return acc;\r\n          },\r\n          {}\r\n        );\r\n\r\n        routes = state.routes.map((route) => map[route.key] || route);\r\n        previousRoutes = props.state.routes;\r\n      }\r\n\r\n      return {\r\n        routes,\r\n        previousRoutes,\r\n        descriptors,\r\n        previousDescriptors,\r\n      };\r\n    }\r\n\r\n    // Here we determine which routes were added or removed to animate them\r\n    // We keep a copy of the route being removed in local state to be able to animate it\r\n\r\n    let routes =\r\n      props.state.index < props.state.routes.length - 1\r\n        ? // Remove any extra routes from the state\r\n          // The last visible route should be the focused route, i.e. at current index\r\n          props.state.routes.slice(0, props.state.index + 1)\r\n        : props.state.routes;\r\n\r\n    // Now we need to determine which routes were added and removed\r\n    let {\r\n      openingRouteKeys,\r\n      closingRouteKeys,\r\n      replacingRouteKeys,\r\n      previousRoutes,\r\n    } = state;\r\n\r\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\r\n      | Route<string>\r\n      | undefined;\r\n    const nextFocusedRoute = routes[routes.length - 1];\r\n\r\n    const isAnimationEnabled = (key: string) => {\r\n      const descriptor = props.descriptors[key] || state.descriptors[key];\r\n\r\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\r\n    };\r\n\r\n    const getAnimationTypeForReplace = (key: string) => {\r\n      const descriptor = props.descriptors[key] || state.descriptors[key];\r\n\r\n      return descriptor.options.animationTypeForReplace ?? 'push';\r\n    };\r\n\r\n    if (\r\n      previousFocusedRoute &&\r\n      previousFocusedRoute.key !== nextFocusedRoute.key\r\n    ) {\r\n      // We only need to animate routes if the focused route changed\r\n      // Animating previous routes won't be visible coz the focused route is on top of everything\r\n\r\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\r\n        // A new route has come to the focus, we treat this as a push\r\n        // A replace can also trigger this, the animation should look like push\r\n\r\n        if (\r\n          isAnimationEnabled(nextFocusedRoute.key) &&\r\n          !openingRouteKeys.includes(nextFocusedRoute.key)\r\n        ) {\r\n          // In this case, we need to animate pushing the focused route\r\n          // We don't care about animating any other added routes because they won't be visible\r\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\r\n\r\n          closingRouteKeys = closingRouteKeys.filter(\r\n            (key) => key !== nextFocusedRoute.key\r\n          );\r\n          replacingRouteKeys = replacingRouteKeys.filter(\r\n            (key) => key !== nextFocusedRoute.key\r\n          );\r\n\r\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\r\n            // The previous focused route isn't present in state, we treat this as a replace\r\n\r\n            openingRouteKeys = openingRouteKeys.filter(\r\n              (key) => key !== previousFocusedRoute.key\r\n            );\r\n\r\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\r\n              closingRouteKeys = [\r\n                ...closingRouteKeys,\r\n                previousFocusedRoute.key,\r\n              ];\r\n\r\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\r\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\r\n              // So remove it from `openingRouteKeys` which will remove the animation\r\n              openingRouteKeys = openingRouteKeys.filter(\r\n                (key) => key !== nextFocusedRoute.key\r\n              );\r\n\r\n              // Keep the route being removed at the end to animate it out\r\n              routes = [...routes, previousFocusedRoute];\r\n            } else {\r\n              replacingRouteKeys = [\r\n                ...replacingRouteKeys,\r\n                previousFocusedRoute.key,\r\n              ];\r\n\r\n              closingRouteKeys = closingRouteKeys.filter(\r\n                (key) => key !== previousFocusedRoute.key\r\n              );\r\n\r\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\r\n              // We need to insert it just before the focused one (the route being pushed)\r\n              // After the push animation is completed, routes being replaced will be removed completely\r\n              routes = routes.slice();\r\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\r\n            }\r\n          }\r\n        }\r\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\r\n        // The previously focused route was removed, we treat this as a pop\r\n\r\n        if (\r\n          isAnimationEnabled(previousFocusedRoute.key) &&\r\n          !closingRouteKeys.includes(previousFocusedRoute.key)\r\n        ) {\r\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\r\n\r\n          // Sometimes a route can be closed before the opening animation finishes\r\n          // So we also need to remove it from the opening list\r\n          openingRouteKeys = openingRouteKeys.filter(\r\n            (key) => key !== previousFocusedRoute.key\r\n          );\r\n          replacingRouteKeys = replacingRouteKeys.filter(\r\n            (key) => key !== previousFocusedRoute.key\r\n          );\r\n\r\n          // Keep a copy of route being removed in the state to be able to animate it\r\n          routes = [...routes, previousFocusedRoute];\r\n        }\r\n      } else {\r\n        // Looks like some routes were re-arranged and no focused routes were added/removed\r\n        // i.e. the currently focused route already existed and the previously focused route still exists\r\n        // We don't know how to animate this\r\n      }\r\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\r\n      // Keep the routes we are closing or replacing if animation is enabled for them\r\n      routes = routes.slice();\r\n      routes.splice(\r\n        routes.length - 1,\r\n        0,\r\n        ...state.routes.filter(({ key }) =>\r\n          isAnimationEnabled(key)\r\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\r\n            : false\r\n        )\r\n      );\r\n    }\r\n\r\n    if (!routes.length) {\r\n      throw new Error(\r\n        'There should always be at least one route in the navigation state.'\r\n      );\r\n    }\r\n\r\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\r\n      acc[route.key] =\r\n        props.descriptors[route.key] || state.descriptors[route.key];\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return {\r\n      routes,\r\n      previousRoutes: props.state.routes,\r\n      previousDescriptors: props.descriptors,\r\n      openingRouteKeys,\r\n      closingRouteKeys,\r\n      replacingRouteKeys,\r\n      descriptors,\r\n    };\r\n  }\r\n\r\n  state: State = {\r\n    routes: [],\r\n    previousRoutes: [],\r\n    previousDescriptors: {},\r\n    openingRouteKeys: [],\r\n    closingRouteKeys: [],\r\n    replacingRouteKeys: [],\r\n    descriptors: {},\r\n  };\r\n\r\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\r\n    const descriptor = this.state.descriptors[route.key];\r\n\r\n    if (descriptor) {\r\n      const { gestureEnabled, animationEnabled } = descriptor.options;\r\n\r\n      if (animationEnabled === false) {\r\n        // When animation is disabled, also disable gestures\r\n        // The gesture to dismiss a route will look weird when not animated\r\n        return false;\r\n      }\r\n\r\n      return gestureEnabled !== undefined\r\n        ? gestureEnabled\r\n        : Platform.OS !== 'android';\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\r\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\r\n    const routes = this.state.routes.filter(\r\n      (r) =>\r\n        r.key === route.key ||\r\n        (!closingRouteKeys.includes(r.key) &&\r\n          !replacingRouteKeys.includes(r.key))\r\n    );\r\n\r\n    const index = routes.findIndex((r) => r.key === route.key);\r\n\r\n    return routes[index - 1];\r\n  };\r\n\r\n  private renderScene = ({ route }: { route: Route<string> }) => {\r\n    const descriptor =\r\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\r\n\r\n    if (!descriptor) {\r\n      return null;\r\n    }\r\n\r\n    const { navigation, getComponent } = descriptor;\r\n    const SceneComponent = getComponent();\r\n\r\n    return (\r\n      <SceneView\r\n        screenProps={this.props.screenProps}\r\n        navigation={navigation}\r\n        component={SceneComponent}\r\n      />\r\n    );\r\n  };\r\n\r\n  private renderHeader = (props: HeaderContainerProps) => {\r\n    return <HeaderContainer {...props} />;\r\n  };\r\n\r\n  private handleTransitionComplete = () => {\r\n    const { state, navigation } = this.props;\r\n\r\n    if (state.isTransitioning) {\r\n      navigation.dispatch(\r\n        StackActions.completeTransition({\r\n          key: navigation.state.key,\r\n          toChildKey: state.routes[state.index].key,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\r\n    const { state, navigation } = this.props;\r\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\r\n\r\n    this.handleTransitionComplete();\r\n\r\n    if (\r\n      closingRouteKeys.some((key) => key === route.key) &&\r\n      replacingRouteKeys.every((key) => key !== route.key) &&\r\n      !state.routes.some((r) => r.key === route.key)\r\n    ) {\r\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\r\n      // So we need to add this route back to the state\r\n      navigation.dispatch(NavigationActions.navigate(route));\r\n    } else {\r\n      this.setState((state) => ({\r\n        routes: state.replacingRouteKeys.length\r\n          ? state.routes.filter(\r\n              (r) => !state.replacingRouteKeys.includes(r.key)\r\n            )\r\n          : state.routes,\r\n        openingRouteKeys: state.openingRouteKeys.filter(\r\n          (key) => key !== route.key\r\n        ),\r\n        closingRouteKeys: state.closingRouteKeys.filter(\r\n          (key) => key !== route.key\r\n        ),\r\n        replacingRouteKeys: [],\r\n      }));\r\n    }\r\n  };\r\n\r\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\r\n    const { state, navigation } = this.props;\r\n\r\n    if (state.routes.some((r) => r.key === route.key)) {\r\n      // If a route exists in state, trigger a pop\r\n      // This will happen in when the route was closed from the card component\r\n      // e.g. When the close animation triggered from a gesture ends\r\n      // @ts-ignore\r\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\r\n    } else {\r\n      this.handleTransitionComplete();\r\n\r\n      // We need to clean up any state tracking the route and pop it immediately\r\n      this.setState((state) => ({\r\n        routes: state.routes.filter((r) => r.key !== route.key),\r\n        openingRouteKeys: state.openingRouteKeys.filter(\r\n          (key) => key !== route.key\r\n        ),\r\n        closingRouteKeys: state.closingRouteKeys.filter(\r\n          (key) => key !== route.key\r\n        ),\r\n      }));\r\n    }\r\n  };\r\n\r\n  private handleTransitionStart = (\r\n    { route }: { route: Route<string> },\r\n    closing: boolean\r\n  ) => {\r\n    const { descriptors } = this.props;\r\n    const descriptor =\r\n      descriptors[route.key] || this.state.descriptors[route.key];\r\n\r\n    descriptor?.options.onTransitionStart?.({ closing });\r\n  };\r\n\r\n  private handleTransitionEnd = (\r\n    { route }: { route: Route<string> },\r\n    closing: boolean\r\n  ) => {\r\n    const { descriptors } = this.props;\r\n    const descriptor =\r\n      descriptors[route.key] || this.state.descriptors[route.key];\r\n\r\n    descriptor?.options.onTransitionStart?.({ closing });\r\n  };\r\n\r\n  private handleGestureStart = () => {\r\n    // Do nothing\r\n  };\r\n\r\n  private handleGestureEnd = () => {\r\n    // Do nothing\r\n  };\r\n\r\n  private handleGestureCancel = () => {\r\n    // Do nothing\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      state,\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      navigation,\r\n      keyboardHandlingEnabled,\r\n      mode = 'card',\r\n      headerMode = mode === 'card' && Platform.OS === 'ios'\r\n        ? 'float'\r\n        : 'screen',\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      descriptors: _,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const {\r\n      routes,\r\n      descriptors,\r\n      openingRouteKeys,\r\n      closingRouteKeys,\r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <GestureHandlerWrapper style={styles.container}>\r\n          <SafeAreaProviderCompat>\r\n            <SafeAreaConsumer>\r\n              {(insets) => (\r\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\r\n                  {(props) => (\r\n                    <HeaderShownContext.Consumer>\r\n                      {(isParentHeaderShown) => (\r\n                        <CardStack\r\n                          mode={mode}\r\n                          insets={insets as EdgeInsets}\r\n                          isParentHeaderShown={isParentHeaderShown}\r\n                          getPreviousRoute={this.getPreviousRoute}\r\n                          getGesturesEnabled={this.getGesturesEnabled}\r\n                          routes={routes}\r\n                          openingRouteKeys={openingRouteKeys}\r\n                          closingRouteKeys={closingRouteKeys}\r\n                          onOpenRoute={this.handleOpenRoute}\r\n                          onCloseRoute={this.handleCloseRoute}\r\n                          onTransitionStart={this.handleTransitionStart}\r\n                          onTransitionEnd={this.handleTransitionEnd}\r\n                          renderHeader={this.renderHeader}\r\n                          renderScene={this.renderScene}\r\n                          headerMode={headerMode}\r\n                          state={state}\r\n                          descriptors={descriptors}\r\n                          onGestureStart={this.handleGestureStart}\r\n                          onGestureEnd={this.handleGestureEnd}\r\n                          onGestureCancel={this.handleGestureCancel}\r\n                          {...rest}\r\n                          {...props}\r\n                        />\r\n                      )}\r\n                    </HeaderShownContext.Consumer>\r\n                  )}\r\n                </KeyboardManager>\r\n              )}\r\n            </SafeAreaConsumer>\r\n          </SafeAreaProviderCompat>\r\n        </GestureHandlerWrapper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n});\r\n"]}
{"version":3,"sources":["validateDeprecatedConfig.tsx"],"names":["shownWarnings","validations","transparentCard","message","compat","c","o","cardStyle","backgroundColor","headerLayoutPreset","headerTitleAlign","headerTransitionPreset","transitionConfig","reduce","acc","name","validateDeprecatedConfig","config","options","result","Object","keys","forEach","process","env","NODE_ENV","includes","console","warn","push"],"mappings":"AAcA,MAAMA,aAAuB,GAAG,EAAhC;AAEA,MAAMC,WAAuC,GAAG;AAC9CC,EAAAA,eAAe,EAAE;AACfC,IAAAA,OAAO,yLADQ;AAEfC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KACND,CAAC,CAACH,eAAF,GACI,EACE,GAAGI,CADL;AAEEC,MAAAA,SAAS,EAAE,CACT;AAAEC,QAAAA,eAAe,EAAE;AAAnB,OADS,EAETF,CAAC,CAACC,SAFO;AAFb,KADJ,GAQID;AAXS,GAD6B;AAc9CG,EAAAA,kBAAkB,EAAE;AAClBN,IAAAA,OAAO,gKADW;AAElBC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,MAAW,EAAE,GAAGA,CAAL;AAAQI,MAAAA,gBAAgB,EAAEL,CAAC,CAACI;AAA5B,KAAX;AAFU,GAd0B;AAkB9CE,EAAAA,sBAAsB,EAAE;AACtBR,IAAAA,OAAO;AADe,GAlBsB;AAqB9CS,EAAAA,gBAAgB,EAAE;AAChBT,IAAAA,OAAO;AADS,GArB4B;AAwB9C,KAAG,CACD,mBADC,EAED,oBAFC,EAGD,WAHC,EAID,wBAJC,EAKD,mBALC,EAMD,iBANC,EAODU,MAPC,CAOkC,CAACC,GAAD,EAAMC,IAAN,KAAe;AAClDD,IAAAA,GAAG,CAACC,IAAD,CAAH,GAAY;AACVZ,MAAAA,OAAO,aAAMY,IAAN,4GADG;AAEVX,MAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,MAAW,EAAE,GAAGA,CAAL;AAAQ,SAACS,IAAD,GAAQ,MAAMV,CAAC,CAACU,IAAD;AAAvB,OAAX;AAFE,KAAZ;AAKA,WAAOD,GAAP;AACD,GAdE,EAcA,EAdA;AAxB2C,CAAhD;AAyCA,eAAe,SAASE,wBAAT,CACbC,MADa,EAEbC,OAFa,EAGb;AACA,MAAIC,MAAM,GAAGD,OAAb;AAEAE,EAAAA,MAAM,CAACC,IAAP,CAAYpB,WAAZ,EAAyBqB,OAAzB,CAAkCP,IAAD,IAAU;AACzC,QAAIA,IAAI,IAAIE,MAAZ,EAAoB;AAClB,YAAM;AAAEb,QAAAA,MAAF;AAAUD,QAAAA;AAAV,UAAsBF,WAAW,CAACc,IAAD,CAAvC;AAEAI,MAAAA,MAAM,GAAGf,MAAM,GAAGA,MAAM,CAACa,MAAD,EAASE,MAAT,CAAT,GAA4BA,MAA3C;;AAEA,UAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAIzB,aAAa,CAAC0B,QAAd,CAAuBvB,OAAvB,CAAJ,EAAqC;AACnC;AACD;;AAEDwB,QAAAA,OAAO,CAACC,IAAR,mDAAwDzB,OAAxD;AACAH,QAAAA,aAAa,CAAC6B,IAAd,CAAmB1B,OAAnB;AACD;AACF;AACF,GAfD;AAiBA,SAAOgB,MAAP;AACD","sourcesContent":["import type { StyleProp, ViewStyle } from 'react-native';\r\nimport type {\r\n  StackNavigationOptions,\r\n  StackNavigationConfig,\r\n} from '../vendor/types';\r\n\r\ntype Validation = {\r\n  message: string;\r\n  compat?: (\r\n    c: Record<string, any>,\r\n    o: StackNavigationOptions\r\n  ) => StackNavigationOptions;\r\n};\r\n\r\nconst shownWarnings: string[] = [];\r\n\r\nconst validations: Record<string, Validation> = {\r\n  transparentCard: {\r\n    message: `'transparentCard' is removed in favor of 'cardStyle: { backgroundColor: 'transparent' }' in 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\r\n    compat: (c, o) =>\r\n      c.transparentCard\r\n        ? {\r\n            ...o,\r\n            cardStyle: [\r\n              { backgroundColor: 'transparent' },\r\n              o.cardStyle,\r\n            ] as StyleProp<ViewStyle>,\r\n          }\r\n        : o,\r\n  },\r\n  headerLayoutPreset: {\r\n    message: `'headerLayoutPreset' is renamed to 'headerTitleAlign' and moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\r\n    compat: (c, o) => ({ ...o, headerTitleAlign: c.headerLayoutPreset }),\r\n  },\r\n  headerTransitionPreset: {\r\n    message: `'headerTransitionPreset' is removed in favor of the new animation APIs`,\r\n  },\r\n  transitionConfig: {\r\n    message: `'transitionConfig' is removed in favor of the new animation APIs`,\r\n  },\r\n  ...[\r\n    'cardShadowEnabled',\r\n    'cardOverlayEnabled',\r\n    'cardStyle',\r\n    'headerBackTitleVisible',\r\n    'onTransitionStart',\r\n    'onTransitionEnd',\r\n  ].reduce<Record<string, Validation>>((acc, name) => {\r\n    acc[name] = {\r\n      message: `'${name}' is moved to 'navigationOptions'. Specify it in 'defaultNavigationOptions' to keep the same behaviour.`,\r\n      compat: (c, o) => ({ ...o, [name]: () => c[name] }),\r\n    };\r\n\r\n    return acc;\r\n  }, {}),\r\n};\r\n\r\nexport default function validateDeprecatedConfig(\r\n  config: StackNavigationConfig,\r\n  options: StackNavigationOptions\r\n) {\r\n  let result = options;\r\n\r\n  Object.keys(validations).forEach((name) => {\r\n    if (name in config) {\r\n      const { compat, message } = validations[name];\r\n\r\n      result = compat ? compat(config, result) : result;\r\n\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (shownWarnings.includes(message)) {\r\n          return;\r\n        }\r\n\r\n        console.warn(`Deprecation in 'createStackNavigator':\\n${message}`);\r\n        shownWarnings.push(message);\r\n      }\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n"]}